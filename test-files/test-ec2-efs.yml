Transform: AWS::LanguageExtensions
Parameters:
  NetworkStackName:
    Description: Network Stack Name
    Default: kodelab-network-stack
    Type: String
    MinLength: '1'
    MaxLength: '255'
  AirflowAmi:
    Type: AWS::EC2::Image::Id
Resources:
  S3ConfigBucket:
    Type: AWS::S3::Bucket
  WebServerInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies: 
      - PolicyName: "s3-read-only-access"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: "Allow"
            Action: "s3:GetObject"
            Resource: !GetAtt S3ConfigBucket.Arn
  WebServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: '/'
      Roles:
      - !Ref WebServerInstanceRole
  WebServerEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: 
        Fn::ImportValue:
          !Sub '${NetworkStackName}-VPCID'
      GroupDescription: Airflow WebServer Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
  WebServerEC2:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: !Ref AirflowAmi
      InstanceType: t2.micro
      IamInstanceProfile: !Ref WebServerInstanceProfile
      KeyName: airflow-ubuntu
      SecurityGroupIds:
      - !Ref WebServerEC2SecurityGroup
      UserData: !Base64 
        'Fn::Sub':
          - |
            #!/bin/bash -xu
            /opt/aws/bin/cfn-init -v -stack ${AWS::StackName} --resource WebServerEC2 --region ${AWS::Region}
            
            sudo bash -c "cat > /etc/systemd/system/airflow-web.service << EOF
            [Unit]
            Description=Airflow webserver daemon
            After=network.target

            [Service]
            User=airflow
            Group=airflow
            Type=simple
            ExecStart=/usr/bin/bash -c '~/.local/bin/airflow webserver'
            Restart=on-failure
            RestartSec=5s
            PrivateTmp=true

            [Install]
            WantedBy=multi-user.target
            EOF"
            
            sudo systemctl daemon-reload
            sudo systemctl enable airflow-web.service --now 

            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource MyInstance --region ${AWS::Region}
          - {}
      SubnetId: 
        Fn::ImportValue:
          !Sub "${NetworkStackName}-SubnetWebA"
  EFS:
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete
    Type: AWS::EFS::FileSystem
    Properties:
      BackupPolicy:
        Status: 'DISABLED'
      PerformanceMode: generalPurpose
      Encrypted: true
  EFSMountTargetA:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFS
      SecurityGroups:
        - Ref: "EFSSecurityGroup"
      SubnetId: 
        Fn::ImportValue:
          !Sub '${NetworkStackName}-SubnetAppA'
  EFSMountTargetB:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFS
      SecurityGroups:
        - Ref: "EFSSecurityGroup"
      SubnetId:
        Fn::ImportValue:
          !Sub '${NetworkStackName}-SubnetAppB'
  EFSMountTargetC:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFS
      SecurityGroups:
        - Ref: "EFSSecurityGroup"
      SubnetId: 
        Fn::ImportValue:
          !Sub '${NetworkStackName}-SubnetAppC'
  EFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group created to control access to EFS"
      GroupName: !Sub  "${AWS::StackName}-efs-sg"
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !Ref WebServerEC2SecurityGroup
      VpcId: 
        Fn::ImportValue:
          !Sub '${NetworkStackName}-VPCID'
  EFSAccessPointDags:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !Ref EFS
      PosixUser:
        Uid: "30000"
        Gid: "30000"
        SecondaryGids:
        - "1000"
        - "1001"
      RootDirectory:
        CreationInfo:
          OwnerUid: "30000"
          OwnerGid: "30000"
          Permissions: "0775"
        Path: /dags
      AccessPointTags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-access-point-dags'
  EFSAccessPointConfig:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !Ref EFS
      PosixUser:
        Uid: "30000"
        Gid: "30000"
        SecondaryGids:
        - "1000"
        - "1001"
      RootDirectory:
        CreationInfo:
          OwnerUid: "30000"
          OwnerGid: "30000"
          Permissions: "0775"
        Path: /config
      AccessPointTags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-access-point-config'
  EFSPolicyModify:
    Type: Custom::EFSPolicyModify
    Properties:
      ServiceToken: !GetAtt EFSLambdaPolicyWorkaround.Arn
      FileSystemId: !Ref EFS
      Policy: 
        Fn::ToJsonString:
          Version: "2012-10-17"
          Statement:
            - Sid: AllowEFSDagsMountPoint
              Effect: "Allow"
              Action:
              - "elasticfilesystem:ClientMount"
              - "elasticfilesystem:ClientWrite"
              Principal:
                AWS: !GetAtt WebServerInstanceRole.Arn
              Condition:
                ArnEquals:
                  elasticfilesystem:AccessPointArn: !GetAtt  EFSAccessPointDags.Arn
            - Sid: AllowEFSConfigMountPoint
              Effect: "Allow"
              Action:
              - "elasticfilesystem:ClientMount"
              - "elasticfilesystem:ClientWrite"
              Principal:
                AWS: !GetAtt WebServerInstanceRole.Arn
              Condition:
                ArnEquals:
                  elasticfilesystem:AccessPointArn: !GetAtt  EFSAccessPointConfig.Arn
  EFSLambdaPolicyRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
      - PolicyName: !Sub "${AWS::StackName}-efs-policy-lambda-logs"
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
      - PolicyName: !Sub "${AWS::StackName}-efs-lambda-access-role"
        PolicyDocument: 
          Version: "2012-10-17"
          Statement:
          - Effect: "Allow"
            Action: '*'
            Resource: !GetAtt EFS.Arn

  EFSLambdaPolicyWorkaround:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Runtime: python3.9
      Code:
        ZipFile:
          Fn::Sub: |
            import cfnresponse
            import boto3

            def lambda_handler(event, context):
                print(event)
                if event['RequestType'] == 'Delete':
                    cfnresponse.send(event, context, cfnresponse.SUCCESS)
                    return
                efs = boto3.client('efs', region_name='${AWS::Region}')
                try:
                    efs.put_file_system_policy(
                        FileSystemId=event['ResourceProperties']['FileSystemId'],
                        Policy=event['ResourceProperties']['Policy']
                    )
                    response_data = {}
                    response_data['FileSystemId'] = event['ResourceProperties']['FileSystemId']
                    cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data, "CustomResourcePhysicalID")
                except Exception as e:
                    print("Error executing lambda permissions.")
                    print(e)
                    cfnresponse.send(event, context, cfnresponse.FAILED)

      Role: !GetAtt EFSLambdaPolicyRole.Arn